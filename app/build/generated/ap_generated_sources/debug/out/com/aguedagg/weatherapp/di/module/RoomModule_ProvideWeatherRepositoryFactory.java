// Generated by Dagger (https://dagger.dev).
package com.aguedagg.weatherapp.di.module;

import com.aguedagg.weatherapp.api.rest.AppWeatherRepository;
import com.aguedagg.weatherapp.api.rest.WeatherRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvideWeatherRepositoryFactory implements Factory<WeatherRepository> {
  private final Provider<AppWeatherRepository> repositoryProvider;

  public RoomModule_ProvideWeatherRepositoryFactory(
      Provider<AppWeatherRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public WeatherRepository get() {
    return provideWeatherRepository(repositoryProvider.get());
  }

  public static RoomModule_ProvideWeatherRepositoryFactory create(
      Provider<AppWeatherRepository> repositoryProvider) {
    return new RoomModule_ProvideWeatherRepositoryFactory(repositoryProvider);
  }

  public static WeatherRepository provideWeatherRepository(AppWeatherRepository repository) {
    return Preconditions.checkNotNull(RoomModule.provideWeatherRepository(repository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
