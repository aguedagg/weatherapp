// Generated by Dagger (https://dagger.dev).
package com.aguedagg.weatherapp.data;

import com.aguedagg.weatherapp.api.rest.WeatherRepository;
import com.aguedagg.weatherapp.data.helper.RoomHelper;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDataManager_Factory implements Factory<AppDataManager> {
  private final Provider<RoomHelper> roomHelperAndHelperProvider;

  private final Provider<WeatherRepository> repositoryAndRepoProvider;

  public AppDataManager_Factory(Provider<RoomHelper> roomHelperAndHelperProvider,
      Provider<WeatherRepository> repositoryAndRepoProvider) {
    this.roomHelperAndHelperProvider = roomHelperAndHelperProvider;
    this.repositoryAndRepoProvider = repositoryAndRepoProvider;
  }

  @Override
  public AppDataManager get() {
    AppDataManager instance = new AppDataManager(roomHelperAndHelperProvider.get(), repositoryAndRepoProvider.get());
    AppDataManager_MembersInjector.injectRoomHelper(instance, roomHelperAndHelperProvider.get());
    AppDataManager_MembersInjector.injectRepository(instance, repositoryAndRepoProvider.get());
    return instance;
  }

  public static AppDataManager_Factory create(Provider<RoomHelper> roomHelperAndHelperProvider,
      Provider<WeatherRepository> repositoryAndRepoProvider) {
    return new AppDataManager_Factory(roomHelperAndHelperProvider, repositoryAndRepoProvider);
  }

  public static AppDataManager newInstance(RoomHelper helper, WeatherRepository repo) {
    return new AppDataManager(helper, repo);
  }
}
