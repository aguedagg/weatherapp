// Generated by Dagger (https://dagger.dev).
package com.aguedagg.weatherapp.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  public WeatherModule_ProvideOkHttpClientFactory(
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    this.interceptorProvider = interceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(interceptorProvider.get());
  }

  public static WeatherModule_ProvideOkHttpClientFactory create(
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    return new WeatherModule_ProvideOkHttpClientFactory(interceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(HttpLoggingInterceptor interceptor) {
    return Preconditions.checkNotNull(WeatherModule.provideOkHttpClient(interceptor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
