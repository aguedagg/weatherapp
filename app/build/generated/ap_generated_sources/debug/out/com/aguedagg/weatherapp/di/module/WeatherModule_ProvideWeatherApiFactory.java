// Generated by Dagger (https://dagger.dev).
package com.aguedagg.weatherapp.di.module;

import com.aguedagg.weatherapp.api.rest.WeatherApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideWeatherApiFactory implements Factory<WeatherApi> {
  private final Provider<OkHttpClient> clientProvider;

  public WeatherModule_ProvideWeatherApiFactory(Provider<OkHttpClient> clientProvider) {
    this.clientProvider = clientProvider;
  }

  @Override
  public WeatherApi get() {
    return provideWeatherApi(clientProvider.get());
  }

  public static WeatherModule_ProvideWeatherApiFactory create(
      Provider<OkHttpClient> clientProvider) {
    return new WeatherModule_ProvideWeatherApiFactory(clientProvider);
  }

  public static WeatherApi provideWeatherApi(OkHttpClient client) {
    return Preconditions.checkNotNull(WeatherModule.provideWeatherApi(client), "Cannot return null from a non-@Nullable @Provides method");
  }
}
