// Generated by data binding compiler. Do not edit!
package com.aguedagg.weatherapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Guideline;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.aguedagg.weatherapp.R;
import com.aguedagg.weatherapp.data.City;
import com.aguedagg.weatherapp.data.Constants;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ViewholderDataBinding extends ViewDataBinding {
  @NonNull
  public final Guideline guideline;

  @NonNull
  public final TextView humidity;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView temperature;

  @NonNull
  public final TextView weatherDescription;

  @NonNull
  public final ImageView weatherIcon;

  @Bindable
  protected View mView;

  @Bindable
  protected Constants mConstant;

  @Bindable
  protected City mModel;

  protected ViewholderDataBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Guideline guideline, TextView humidity, TextView name, TextView temperature,
      TextView weatherDescription, ImageView weatherIcon) {
    super(_bindingComponent, _root, _localFieldCount);
    this.guideline = guideline;
    this.humidity = humidity;
    this.name = name;
    this.temperature = temperature;
    this.weatherDescription = weatherDescription;
    this.weatherIcon = weatherIcon;
  }

  public abstract void setView(@Nullable View view);

  @Nullable
  public View getView() {
    return mView;
  }

  public abstract void setConstant(@Nullable Constants constant);

  @Nullable
  public Constants getConstant() {
    return mConstant;
  }

  public abstract void setModel(@Nullable City model);

  @Nullable
  public City getModel() {
    return mModel;
  }

  @NonNull
  public static ViewholderDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.viewholder_data, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ViewholderDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ViewholderDataBinding>inflateInternal(inflater, R.layout.viewholder_data, root, attachToRoot, component);
  }

  @NonNull
  public static ViewholderDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.viewholder_data, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ViewholderDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ViewholderDataBinding>inflateInternal(inflater, R.layout.viewholder_data, null, false, component);
  }

  public static ViewholderDataBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ViewholderDataBinding bind(@NonNull View view, @Nullable Object component) {
    return (ViewholderDataBinding)bind(component, view, R.layout.viewholder_data);
  }
}
